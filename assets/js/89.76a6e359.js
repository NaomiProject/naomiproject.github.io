(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{335:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("These instructions are for installing pocketsphinx on Debian 9 (Stretch). I have also tested on Raspbian Stretch. These instructions should translate to other distros pretty easily. In many cases the package names will be the same, and in other cases you should be able to locate the package by searching for its name or the name of a file within it.")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("You want to make sure that the level indicator at the bottom of the screen goes up to about 60% when you are speaking. Use alsamixer to adjust your recording and playback levels.")]),t._v(" "),s("p",[t._v("Also, play it back and make sure the audio does not contain any hissing or popping.")]),t._v(" "),s("p",[t._v("We will use Phonetisaurus to prepare PocketSphinx to transcribe this audio later in these instructions.")]),t._v(" "),t._m(2),s("p",[t._v('If you are on a Raspberry Pi, most likely when you use the arecord command, you will get an error such as "arecord: main:788: audio open error: No such file or directory". This is because the first sound device (card 0) is output only. You will need to specify the recording device. To get a list of recording devices, use "arecord -l". This will return something like this:')]),t._v(" "),t._m(3),s("p",[t._v('This means that audio card 1, subdevice 0 is capable of recording audio. Usually you will either reference the device as hw:1,0 or plughw:1,0. hw:1,0 accesses the device more directly, while plughw:1,0 includes a translation layer allowing it to be used to record in formats that the device does not support natively. You can use "arecord -L" to see which interfaces are available:')]),t._v(" "),t._m(4),s("p",[t._v('Use "-D" to specify the device, and "--list-hw-params" to get more information about what formats the device supports:')]),t._v(" "),t._m(5),s("p",[t._v('The important bits here are "CHANNELS: 2", "RATE: 16000" and "Available formats: - S16_LE". The rate and format match the format that Naomi expects audio to be captured in, but we need mono audio, not stereo, so we will most likely need to use the plughw version.')]),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),s("p",[t._v("Building mitlm is only necessary because we are training our own fst model a little further on.")]),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),t._m(22),t._m(23),t._v(" "),s("p",[t._v("I'm not exactly sure why this is, but apparently it is necessary to reformat the default cmudict.dict file.")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),t._m(39),s("p",[t._v("Here's what this section of the profile.yml looks like")]),t._v(" "),t._m(40),s("DocPreviousVersions"),t._v(" "),s("EditPageLink")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"pocketsphinx-setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pocketsphinx-setup","aria-hidden":"true"}},[this._v("#")]),this._v(" PocketSphinx setup")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"test-the-microphone-hello-can-you-hear-me"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-the-microphone-hello-can-you-hear-me","aria-hidden":"true"}},[this._v("#")]),this._v(' test the microphone ("hello, can you hear me?")')])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ sudo apt install alsa-utils\n\n[~]$ alsamixer\n\n[~]$ arecord -vv -r16000 -fS16_LE -c1 -d3 test.wav\n\n[~]$ aplay test.wav\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ arecord -l\n**** List of CAPTURE Hardware Devices ****\ncard 1: Phone [PH USB Speaker Phone], device 0: USB Audio [USB Audio]\n  Subdevices: 1/1\n  Subdevice #0: subdevice #0\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dsl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ arecord "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("L\nnull\n    Discard all samples"),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (playback)")]),t._v(" or generate zero samples"),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v(" (capture)")]),t._v("\ndefault"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Audio")]),t._v(" Device\nsysdefault"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Audio")]),t._v(" Device\ndmix"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    Direct sample mixing device\ndsnoop"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    Direct sample snooping device\nhw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    Direct hardware device without any conversions\nplughw"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("CARD"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("DEV"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    PH USB Speaker Phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USB Audio\n    Hardware device with all software conversions\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ arecord -Dhw:1,0 --dump-hw-params\nRecording WAVE 'stdin' : Unsigned 8 bit, Rate 8000 Hz, Mono\nHW Params of device \"hw:1,0\":\n--------------------\nACCESS:  MMAP_INTERLEAVED RW_INTERLEAVED\nFORMAT:  S16_LE\nSUBFORMAT:  STD\nSAMPLE_BITS: 16\nFRAME_BITS: 32\nCHANNELS: 2\nRATE: 16000\nPERIOD_TIME: [1000 8192000]\nPERIOD_SIZE: [16 131072]\nPERIOD_BYTES: [64 524288]\nPERIODS: [2 1024]\nBUFFER_TIME: [2000 16384000]\nBUFFER_SIZE: [32 262144]\nBUFFER_BYTES: [128 1048576]\nTICK_TIME: ALL\n--------------------\narecord: set_params:1299: Sample format non available\nAvailable formats:\n- S16_LE\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ arecord -Dhw:1,0 -vv -r16000 -fS16_LE -c1 -d3 test.wav\nRecording WAVE 'test.wav' : Signed 16 bit Little Endian, Rate 16000 Hz, Mono\narecord: set_params:1305: Channels count non available\n\n[~]$ arecord -Dplughw:1,0 -vv -r16000 -fS16_LE -c1 -d3 test.wav\nRecording WAVE 'test.wav' : Signed 16 bit Little Endian, Rate 16000 Hz, Mono\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"install-phonetisaurus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-phonetisaurus","aria-hidden":"true"}},[this._v("#")]),this._v(" Install Phonetisaurus")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-and-install-openfst"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-openfst","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install openfst")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ sudo apt install gcc g++ make python-pip autoconf libtool\n[~]$ wget http://www.openfst.org/twiki/pub/FST/FstDownload/openfst-1.6.9.tar.gz\n[~]$ tar -zxvf openfst-1.6.9.tar.gz\n[~]$ cd openfst-1.6.9\n[~/openfst-1.6.9]$ autoreconf -i\n[~/openfst-1.6.9]$ ./configure --enable-static --enable-shared --enable-far --enable-lookahead-fsts --enable-const-fsts --enable-pdt --enable-ngram-fsts --enable-linear-fsts --prefix=/usr\n[~/openfst-1.6.9]$ make\n[~/openfst-1.6.9]$ sudo make install\n[~/openfst-1.6.9]$ cd\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-and-install-mitlm-0-4-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-mitlm-0-4-2","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install mitlm-0.4.2")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ sudo apt install git gfortran autoconf-archive\n[~]$ git clone https://github.com/mitlm/mitlm.git\n[~]$ cd mitlm\n[~/mitlm]$ ./autogen.sh\n[~/mitlm]$ make\n[~/mitlm]$ sudo make install\n[~/mitlm]$ sudo ldconfig\n[~/mitlm]$ cd\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-and-install-phonetisaurus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-phonetisaurus","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install Phonetisaurus")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ git clone https://github.com/AdolfVonKleist/Phonetisaurus.git\n[~]$ cd Phonetisaurus\n[~/Phonetisaurus]$ ./configure --enable-python\n[~/Phonetisaurus]$ make\n[~/Phonetisaurus]$ sudo make install\n[~/Phonetisaurus]$ cd python\n[~/Phonetisaurus/python]$ cp -iv ../.libs/Phonetisaurus.so ./\n[~/Phonetisaurus/python]$ sudo python setup.py install\n[~/Phonetisaurus/python]$ cd\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"build-and-install-cmuclmtk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-cmuclmtk","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install CMUCLMTK")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ sudo apt install subversion\n[~]$ svn co https://svn.code.sf.net/p/cmusphinx/code/trunk/cmuclmtk/\n[~]$ cd cmuclmtk\n[~/cmuclmtk]$ ./autogen.sh\n[~/cmuclmtk]$ make\n[~/cmuclmtk]$ sudo make install\n[~/cmuclmtk]$ sudo ldconfig\n[~/cmuclmtk]$ cd\n[~]$ sudo pip install cmuclmtk\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"install-pocketsphinx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-pocketsphinx","aria-hidden":"true"}},[this._v("#")]),this._v(" Install Pocketsphinx")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-and-install-sphinxbase-0-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-sphinxbase-0-8","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install sphinxbase-0.8")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~]$ sudo apt install swig libasound2-dev bison\n[~]$ git clone --recursive https://github.com/cmusphinx/pocketsphinx-python.git\n[~]$ cd pocketsphinx-python/sphinxbase\n[~/pocketsphinx-python/sphinxbase]$ ./autogen.sh\n[~/pocketsphinx-python/sphinxbase]$ make\n[~/pocketsphinx-python/sphinxbase]$ sudo make install\n[~/pocketsphinx-python/sphinxbase]$ cd ..\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"build-and-install-pocketsphinx-0-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-and-install-pocketsphinx-0-8","aria-hidden":"true"}},[this._v("#")]),this._v(" Build and install pocketsphinx-0.8")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/pocketsphinx-python]$ cd pocketsphinx\n[~/pocketsphinx-python/pocketsphinx]$ ./autogen.sh\n[~/pocketsphinx-python/pocketsphinx]$ ./configure\n[~/pocketsphinx-python/pocketsphinx]$ make\n[~/pocketsphinx-python/pocketsphinx]$ sudo make install\n[~/pocketsphinx-python/pocketsphinx]$ cd ..\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"install-python-pocketsphinx-library"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install-python-pocketsphinx-library","aria-hidden":"true"}},[this._v("#")]),this._v(" Install python PocketSphinx library")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/pocketsphinx-python]$ sudo python setup.py install\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"format-cmudict-dict-and-train-model-fst"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#format-cmudict-dict-and-train-model-fst","aria-hidden":"true"}},[this._v("#")]),this._v(" Format cmudict.dict and train model.fst")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v('When there are multiple pronunciations for a word, this removes the trailing "(n)".')]),this._v(" "),e("li",[this._v("Then it compresses multiple white spaces into a single space.")]),this._v(" "),e("li",[this._v("Then it removes white space from the beginning and end of the line.")]),this._v(" "),e("li",[this._v("Finally, it replaces the first space on the line with a tab character.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[~/pocketsphinx-python]$ cd pocketsphinx/model/en-us\n[~/pocketsphinx-python/pocketsphinx/model/en-us]$ cat cmudict-en-us.dict | perl -pe \'s/^([^\\s]*)\\(([0-9]+)\\)/\\1/;s/\\s+/ /g;s/^\\s+//;s/\\s+$//; @_=split(/\\s+/); $w=shift(@_);$_=$w."\\t".join(" ",@_)."\\n";\' > cmudict-en-us.formatted.dict\n[~/pocketsphinx-python/pocketsphinx/model/en-us]$ phonetisaurus-train --lexicon cmudict-en-us.formatted.dict --seq2_del\n[~/pocketsphinx-python/pocketsphinx/model/en-us]$ cd\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test","aria-hidden":"true"}},[this._v("#")]),this._v(" Test")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[~]$ mkdir test\n[~]$ cd test\n[~/test]$ echo "<s> hello can you hear me </s>" > test_reference.txt\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"create-test-vocab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-test-vocab","aria-hidden":"true"}},[this._v("#")]),this._v(" Create test.vocab")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/test]$ text2wfreq < test_reference.txt | wfreq2vocab > test.vocab\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"create-test-idngram"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-test-idngram","aria-hidden":"true"}},[this._v("#")]),this._v(" Create test.idngram")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/test]$ text2idngram -vocab test.vocab -idngram test.idngram < test_reference.txt\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"create-test-lm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-test-lm","aria-hidden":"true"}},[this._v("#")]),this._v(" Create test.lm")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/test]$ idngram2lm -vocab_type 0 -idngram test.idngram -vocab test.vocab -arpa test.lm\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"create-test-formatted-dict"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-test-formatted-dict","aria-hidden":"true"}},[this._v("#")]),this._v(" Create test.formatted.dict")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[~/test]$ phonetisaurus-g2pfst --model=`ls ~/pocketsphinx-python/pocketsphinx/model/en-us/train/model.fst` --nbest=1 --beam=1000 --thresh=99.0 --accumulate=true --pmass=0.85 --nlog_probs=false --wordlist=./test.vocab > test.dict\n[~/test]$ cat test.dict | sed -rne \'/^([[:lower:]])+\\s/p\' | perl -pe \'s/([0-9])+//g;s/\\s+/ /g;@_=split(/\\s+/);$w=shift(@_);$_=$w."\\t".join(" ",@_)."\\n";\' > test.formatted.dict\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"test-with-audio-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-with-audio-file","aria-hidden":"true"}},[this._v("#")]),this._v(" Test with audio file")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/test]$ pocketsphinx_continuous -hmm ~/pocketsphinx-python/pocketsphinx/model/en-us/en-us -lm ./test.lm -dict ./test.formatted.dict -samprate 16000/8000/48000 -infile ~/test.wav 2>/dev/null\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"test-with-microphone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-with-microphone","aria-hidden":"true"}},[this._v("#")]),this._v(" Test with microphone")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[~/test]$ pocketsphinx_continuous -hmm ~/pocketsphinx-python/pocketsphinx/model/en-us/en-us -lm ./test.lm -dict ./test.formatted.dict -samprate 16000/8000/48000 -inmic yes 2>/dev/null\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-console extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("active_stt:\n  engine: sphinx\npocketsphinx:\n  fst_model: /home/pi/pocketsphinx-python/pocketsphinx/model/en-us/train/model.fst\n  hmm_dir: /home/pi/pocketsphinx-python/pocketsphinx/model/en-us/en-us\n  phonetisaurus_executable: phonetisaurus-g2pfst\n")])])])}],!1,null,null,null);e.default=n.exports}}]);